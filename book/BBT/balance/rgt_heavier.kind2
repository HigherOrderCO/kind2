use BBT/{bin,tip,lft_rotate,rgt_rotate}
use Bool/{true,false}

rgt_heavier <K> <V>
  (cmp: ∀(a: K) ∀(b: K) Cmp)
  (new_size: U60)
  (node_key: K)
  (set_key: K)
  (val: V)
  (lft: (BBT K V))
  (rgt: (BBT K V))
: (BBT K V) =
  match rgt {
    bin:
      match _ = (Cmp/is_gtn (cmp set_key rgt.key)) {
        true:
          use rgt = (bin K V rgt.size rgt.key rgt.val rgt.lft rgt.rgt)
          (lft_rotate new_size rgt.key val lft rgt)
        false:
          use rgt = (rgt_rotate rgt.size rgt.key rgt.val rgt.lft rgt.rgt)
          (lft_rotate new_size rgt.key val lft rgt)
      }
    tip: (tip K V)
  }



//BBT.balance.rgt_heavier
//: ∀(K: *)
  //∀(V: *)
  //∀(cmp: ∀(a: K) ∀(b: K) Cmp)
  //∀(new_size: U60)
  //∀(node_key: K)
  //∀(set_key: K)
  //∀(val: V)
  //∀(lft: (BBT K V))
  //∀(rgt: (BBT K V))
  //(BBT K V)
//= λK λV λcmp λnew_size λnode_key λset_key λval λlft λrgt
  //use P = λx (BBT K V)
  //use bin = λrgt.size λrgt.key λrgt.val λrgt.lft λrgt.rgt
    //use P = λx
      //∀(new_size: U60)
      //∀(key: K)
      //∀(val: V)
      //∀(lft: (BBT K V))
      //∀(rgt.key: K)
      //∀(rgt.val: V)
      //∀(rgt.lft: (BBT K V))
      //∀(rgt.rgt: (BBT K V))
      //(BBT K V)
    //use true = λnew_size λkey λval λlft λrgt.key λrgt.val λrgt.lft λrgt.rgt
      //use rgt = (BBT.bin K V rgt.size rgt.key rgt.val rgt.lft rgt.rgt)
      //(BBT.lft_rotate K V new_size key val lft rgt)
    //use false = λnew_size λkey λval λlft λrgt.key λrgt.val λrgt.lft λrgt.rgt
      //use rgt = (BBT.rgt_rotate
          //K
          //V
          //rgt.size
          //rgt.key
          //rgt.val
          //rgt.lft
          //rgt.rgt
        //)
      //(BBT.lft_rotate K V new_size key val lft rgt)
    //(~(Cmp.is_gtn (cmp set_key rgt.key))
      //P
      //true
      //false
      //new_size
      //node_key
      //val
      //lft
      //rgt.key
      //rgt.val
      //rgt.lft
      //rgt.rgt
    //)
  //use tip = (BBT.tip K V)
  //(~rgt P bin tip)
