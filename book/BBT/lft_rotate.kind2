use BBT/{bin,tip}

lft_rotate <K> <V> (size: U60) (key: K) (val: V) (lft: (BBT K V)) (rgt: (BBT K V)) : (BBT K V) =
  match rgt {
    bin:
      use b = (BBT/new_node key val lft rgt.lft)
      use a = (BBT/new_node rgt.key rgt.val b rgt.rgt)
      a
    tip: (bin K V size key val lft (tip K V))
  }



//BBT.lft_rotate
//: ∀(K: *)
  //∀(V: *)
  //∀(size: U60)
  //∀(key: K)
  //∀(val: V)
  //∀(lft: (BBT K V))
  //∀(rgt: (BBT K V))
  //(BBT K V)
//= λK λV λsize λkey λval λlft λrgt
  //use P = λx ∀(key: K) ∀(val: V) ∀(lft: (BBT K V)) (BBT K V)
  //use bin = λ_size λrgt.key λrgt.val λrgt.lft λrgt.rgt λkey λval λlft
    //use b = (BBT.new_node K V key val lft rgt.lft)
    //use a = (BBT.new_node K V rgt.key rgt.val b rgt.rgt)
    //a
  //use tip = λkey λval λlft
    //(BBT.bin K V size key val lft (BBT.tip K V))
  //(~rgt P bin tip key val lft)
